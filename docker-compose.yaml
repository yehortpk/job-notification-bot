services:
  notifier:
    environment:
      KAFKA_NOTIFIER_TOPIC: vacancies
    depends_on:
      router:
        condition: service_healthy
    profiles:
      - notifier
      - app

  router:
    environment:
      KAFKA_NOTIFIER_TOPIC: vacancies
      KAFKA_SUBSCRIBE_TOPIC: subscriptions
      KAFKA_BOT_NOTIFIER_TOPIC: bot-notifier
      MYSQL_USERNAME: ${MYSQL_USERNAME}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    command: ["java", "-jar", "/app/router-0.0.1-SNAPSHOT.jar"]
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy
    profiles:
      - router
      - notifier
      - bot
      - app

  subscriber-bot:
    environment:
      KAFKA_SUBSCRIBE_TOPIC: subscriptions
      KAFKA_BOT_NOTIFIER_TOPIC: bot-notifier
      TG_BOT_API_KEY: ${TG_BOT_API_KEY}
      TG_BOT_USERNAME: ${TG_BOT_USERNAME}
    command: ["java", "-jar", "/app/subscriber-bot-0.0.1-SNAPSHOT.jar"]
    depends_on:
      router:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - bot
      - app

  redis:
    image: redis:7.2.4
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - bot
      - app

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - notifier
      - router
      - bot
      - app

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - notifier
      - router
      - bot
      - app

  mysql:
    image: mysql:8.3.0
    environment:
      MYSQL_DATABASE: notifier
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - notifier
      - router
      - bot
      - app