services:
  parser:
    container_name: notifier-parser-local
    build:
      dockerfile: ./parser/local.Dockerfile
    volumes:
      - ./logs:/app/logs
    networks:
      - notifier-local-network
    ports:
      - "5005:5005"
      - "8082:8080"
    environment:
      KAFKA_PARSER_TOPIC: vacancies
    depends_on:
      router:
        condition: service_healthy
    profiles:
      - parser
      - app

  router:
    container_name: notifier-router-local
    build:
      dockerfile: ./router/local.Dockerfile
    networks:
      - notifier-local-network
    ports:
      - "8081:8080"
      - "5006:5006"
    environment:
      KAFKA_PARSER_TOPIC: vacancies
      KAFKA_SUBSCRIBE_TOPIC: subscriptions
      KAFKA_BOT_NOTIFIER_TOPIC: bot-notifier
      MYSQL_USERNAME: ${MYSQL_USERNAME}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MONGO_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_ROOT_PASS: ${MONGO_ROOT_PASS}
      MONGO_PROGRESS_DB: ${MONGO_PROGRESS_DB}
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      kafka:
        condition: service_healthy
      mysql:
        condition: service_healthy
    profiles:
      - router
      - parser
      - bot
      - app

  bot:
    container_name: notifier-bot-local
    build:
      dockerfile: ./subscriber-bot/local.Dockerfile
    networks:
      - notifier-local-network
    ports:
      - "5007:5007"
    environment:
      KAFKA_SUBSCRIBE_TOPIC: subscriptions
      KAFKA_BOT_NOTIFIER_TOPIC: bot-notifier
      TG_BOT_API_KEY: ${TG_BOT_API_KEY}
      TG_BOT_USERNAME: ${TG_BOT_USERNAME}
    depends_on:
      router:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - bot
      - app

  redis:
    image: redis:7.2.4
    container_name: notifier-redis-local
    volumes:
      - notifier-redis-local-data:/data
    ports:
      - "6379:6379"
    networks:
      - notifier-local-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - bot
      - app

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: notifier-zookeeper-local
    volumes:
      - notifier-zookeeper-local-data:/var/lib/zookeeper/data
      - notifier-zookeeper-local-log:/var/lib/zookeeper/log
    ports:
      - "22181:2181"
    networks:
      - notifier-local-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - parser
      - router
      - bot
      - app

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: notifier-kafka-local
    ports:
      - "29092:29092"
      - "9092"
    networks:
      - notifier-local-network
    volumes:
      - notifier-kafka-local-data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://notifier-kafka-local:9092,PLAINTEXT_HOST://localhost:29092
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - parser
      - router
      - bot
      - app

  mysql:
    image: mysql:8.3.0
    container_name: notifier-mysql-local
    volumes:
      - notifier-mysql-local-data:/var/lib/mysql
      - ./notifier-init.sql:/docker-entrypoint-initdb.d/notifier-init.sql
    ports:
      - "3306:3306"
    networks:
      - notifier-local-network
    environment:
      MYSQL_DATABASE: notifier
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - parser
      - router
      - bot
      - app

  mongo:
    image: mongo:6.0
    container_name: notifier-mongo-local
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASS}
      MONGO_INITDB_DATABASE: ${MONGO_PROGRESS_DB}
    networks:
      - notifier-local-network
    volumes:
      - mongo-data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro

networks:
  notifier-local-network:
    driver: bridge

volumes:
  notifier-kafka-local-data:
  notifier-mysql-local-data:
  notifier-redis-local-data:
  notifier-zookeeper-local-data:
  notifier-zookeeper-local-log:
  mongo-data:
